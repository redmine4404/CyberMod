package redmine.cybermod.gui;

import com.google.common.util.concurrent.Runnables;
import com.mojang.blaze3d.matrix.MatrixStack;
import com.mojang.blaze3d.platform.GlStateManager;
import com.mojang.blaze3d.systems.RenderSystem;
import java.io.IOException;
import java.util.Random;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.Executor;
import javax.annotation.Nullable;
import net.minecraft.client.gui.AccessibilityScreen;
import net.minecraft.client.gui.DialogTexts;
import net.minecraft.client.gui.screen.*;
import net.minecraft.client.gui.toasts.SystemToast;
import net.minecraft.client.gui.widget.Widget;
import net.minecraft.client.gui.widget.button.Button;
import net.minecraft.client.gui.widget.button.ImageButton;
import net.minecraft.client.multiplayer.ServerData;
import net.minecraft.client.renderer.RenderSkybox;
import net.minecraft.client.renderer.RenderSkyboxCube;
import net.minecraft.client.renderer.texture.TextureManager;
import net.minecraft.client.resources.I18n;
import net.minecraft.realms.RealmsBridgeScreen;
import net.minecraft.server.MinecraftServer;
import net.minecraft.util.ResourceLocation;
import net.minecraft.util.SharedConstants;
import net.minecraft.util.Util;
import net.minecraft.util.math.MathHelper;
import net.minecraft.util.registry.DynamicRegistries;
import net.minecraft.util.text.StringTextComponent;
import net.minecraft.util.text.TranslationTextComponent;
import net.minecraft.world.gen.settings.DimensionGeneratorSettings;
import net.minecraft.world.storage.SaveFormat;
import net.minecraft.world.storage.WorldSummary;
import net.minecraftforge.api.distmarker.Dist;
import net.minecraftforge.api.distmarker.OnlyIn;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import redmine.cybermod.utils.Reference;
import redmine.cybermod.utils.customSplashes;

@OnlyIn(Dist.CLIENT)
public class CustomMainMenu extends Screen {
    private static final Logger field_238656_b_ = LogManager.getLogger();
    public static final RenderSkyboxCube PANORAMA_RESOURCES = new RenderSkyboxCube(new ResourceLocation("textures/gui/title/background/panorama"));
    private static final ResourceLocation PANORAMA_OVERLAY_TEXTURES = new ResourceLocation("textures/gui/title/background/panorama_overlay.png");
    private static final ResourceLocation ACCESSIBILITY_TEXTURES = new ResourceLocation("textures/gui/accessibility.png");
    private final boolean showTitleWronglySpelled;
    @Nullable
    private String splashText;
    private Button buttonResetDemo;
    private static final ResourceLocation MINECRAFT_TITLE_TEXTURES = new ResourceLocation("textures/gui/title/minecraft.png");
    private static final ResourceLocation MINECRAFT_TITLE_EDITION = new ResourceLocation("textures/gui/title/edition.png");
    /** Has the check for a realms notification screen been performed? */
    private boolean hasCheckedForRealmsNotification;
    /**
     * A screen generated by realms for notifications drawn in adition to the main menu (buttons and such from both are
     * drawn at the same time). May be null.
     */
    private Screen realmsNotification;
    private int widthCopyright;
    private int widthCopyrightRest;
    private final RenderSkybox panorama = new RenderSkybox(PANORAMA_RESOURCES);
    private final boolean showFadeInAnimation;
    private long firstRenderTime;
    private net.minecraftforge.client.gui.NotificationModUpdateScreen modUpdateNotification;

    public CustomMainMenu() {
        this(false);
    }

    public CustomMainMenu(boolean fadeIn) {
        super(new TranslationTextComponent("narrator.screen.title"));
        this.showFadeInAnimation = fadeIn;
        this.showTitleWronglySpelled = (double)(new Random()).nextFloat() < 1.0E-4D;
    }

    /**
     * Is there currently a realms notification screen, and are realms notifications enabled?
     */
    private boolean areRealmsNotificationsEnabled() {
        return this.minecraft.options.realmsNotifications && this.realmsNotification != null;
    }

    public void tick() {
        if (this.areRealmsNotificationsEnabled()) {
            this.realmsNotification.tick();
        }

    }

    public static CompletableFuture<Void> loadAsync(TextureManager texMngr, Executor backgroundExecutor) {
        return CompletableFuture.allOf(texMngr.preload(MINECRAFT_TITLE_TEXTURES, backgroundExecutor), texMngr.preload(MINECRAFT_TITLE_EDITION, backgroundExecutor), texMngr.preload(PANORAMA_OVERLAY_TEXTURES, backgroundExecutor), PANORAMA_RESOURCES.preload(texMngr, backgroundExecutor));
    }

    public boolean isPauseScreen() {
        return false;
    }

    public boolean shouldCloseOnEsc() {
        return false;
    }

    protected void init() {
        this.splashText = new customSplashes().getSplash();

        this.widthCopyright = this.font.width("Copyright Mojang AB. Do not distribute!");
        this.widthCopyright = this.font.width("Copyright Mojang AB. Do not distribute!");
        this.widthCopyrightRest = this.width - this.widthCopyright - 2;
        int i = 24;
        int j = this.height / 4 + 48;
        Button modButton = null;
        if (this.minecraft.isDemo()) {
            this.addDemoButtons(j, 24);
        } else {
            this.addSingleplayerMultiplayerButtons(j, 24);
            modButton = this.addButton(new Button(this.width / 2 - 100, j + 24 * 2, 98, 20, new TranslationTextComponent("fml.menu.mods"), button -> {
                this.minecraft.setScreen(new net.minecraftforge.fml.client.gui.screen.ModListScreen(this));
            }));
        }
    //    modUpdateNotification = net.minecraftforge.client.gui.NotificationModUpdateScreen.init(this, modButton);

        this.addButton(new ImageButton(this.width / 2 - 124, j + 72 + 12, 20, 20, 0, 106, 20, Button.WIDGETS_LOCATION, 256, 256, (p_213090_1_) -> {
            this.minecraft.setScreen(new LanguageScreen(this, this.minecraft.options, this.minecraft.getLanguageManager()));
        }, new TranslationTextComponent("narrator.button.language")));
        this.addButton(new Button(this.width / 2 - 100, j + 72 + 12, 98, 20, new TranslationTextComponent("menu.options"), (p_213096_1_) -> {
            this.minecraft.setScreen(new OptionsScreen(this, this.minecraft.options));
        }));
        this.addButton(new Button(this.width / 2 + 2, j + 72 + 12, 98, 20, new TranslationTextComponent("menu.quit"), (p_213094_1_) -> {
            this.minecraft.stop();
        }));
        this.addButton(new ImageButton(this.width / 2 + 104, j + 72 + 12, 20, 20, 0, 0, 20, ACCESSIBILITY_TEXTURES, 32, 64, (p_213088_1_) -> {
            this.minecraft.setScreen(new AccessibilityScreen(this, this.minecraft.options));
        }, new TranslationTextComponent("narrator.button.accessibility")));
        this.minecraft.setConnectedToRealms(false);
        if (this.minecraft.options.realmsNotifications && !this.hasCheckedForRealmsNotification) {
            RealmsBridgeScreen realmsbridgescreen = new RealmsBridgeScreen();
            this.realmsNotification = realmsbridgescreen.getNotificationScreen(this);
            this.hasCheckedForRealmsNotification = true;
        }

        if (this.areRealmsNotificationsEnabled()) {
            this.realmsNotification.init(this.minecraft, this.width, this.height);
        }

    }

    /**
     * Adds Singleplayer and Multiplayer buttons on Main Menu for players who have bought the game.
     */
    private void addSingleplayerMultiplayerButtons(int yIn, int rowHeightIn) {
        if(Reference.solo){
            this.addButton(new Button(this.width / 2 - 100, yIn, 200, 20, new TranslationTextComponent("menu.singleplayer"), (p_213089_1_) -> {
                this.minecraft.setScreen(new WorldSelectionScreen(this));
            }));}

        if(Reference.CybercraftOrMultiplayer){
            (this.addButton(new Button(this.width / 2 - 100, yIn+ rowHeightIn * 1, 200, 20, new StringTextComponent("Connect to cybercraft"), (p_213095_1_) -> {
                ServerData serverData = new ServerData( "CyberCraft",Reference.ServerIP + ":" + Reference.ServerPORT, false);
                this.minecraft.setScreen(new ConnectingScreen(this, this.minecraft, serverData)); }))).active = true;
        }else {
            (this.addButton(new Button(this.width / 2 - 100, yIn+  rowHeightIn* 1, 200, 20, new TranslationTextComponent("menu.multiplayer"), (p_213095_1_) -> {
                Screen screen = (Screen) (this.minecraft.options.skipMultiplayerWarning ? new MultiplayerScreen(this) : new MultiplayerWarningScreen(this));
                this.minecraft.setScreen(screen);
            }))).active = true;
        }

        (this.addButton(new Button(this.width / 2 + 2, yIn + rowHeightIn * 2, 98, 20, new TranslationTextComponent("menu.online"), (p_238661_1_) -> {

        }))).active = false;
    }


    /**
     * Adds Demo buttons on Main Menu for players who are playing Demo.
     */
    private void addDemoButtons(int yIn, int rowHeightIn) {
        boolean flag = this.checkDemoWorldPresence();
        this.addButton(new Button(this.width / 2 - 100, yIn, 200, 20, new TranslationTextComponent("menu.playdemo"), (p_213091_2_) -> {
            if (flag) {
                this.minecraft.loadLevel("Demo_World");
            } else {
                DynamicRegistries.Impl dynamicregistries$impl = DynamicRegistries.builtin();
                this.minecraft.createLevel("Demo_World", MinecraftServer.DEMO_SETTINGS, dynamicregistries$impl, DimensionGeneratorSettings.demoSettings(dynamicregistries$impl));
            }

        }));
        this.buttonResetDemo = this.addButton(new Button(this.width / 2 - 100, yIn + rowHeightIn * 1, 200, 20, new TranslationTextComponent("menu.resetdemo"), (p_238658_1_) -> {
            SaveFormat saveformat = this.minecraft.getLevelSource();

            try (SaveFormat.LevelSave saveformat$levelsave = saveformat.createAccess("Demo_World")) {
                WorldSummary worldsummary = saveformat$levelsave.getSummary();
                if (worldsummary != null) {
                    this.minecraft.setScreen(new ConfirmScreen(this::deleteDemoWorld, new TranslationTextComponent("selectWorld.deleteQuestion"), new TranslationTextComponent("selectWorld.deleteWarning", worldsummary.getLevelName()), new TranslationTextComponent("selectWorld.deleteButton"), DialogTexts.GUI_CANCEL));
                }
            } catch (IOException ioexception) {
                SystemToast.onWorldAccessFailure(this.minecraft, "Demo_World");
                field_238656_b_.warn("Failed to access demo world", (Throwable)ioexception);
            }

        }));
        this.buttonResetDemo.active = flag;
    }

    private boolean checkDemoWorldPresence() {
        try (SaveFormat.LevelSave saveformat$levelsave = this.minecraft.getLevelSource().createAccess("Demo_World")) {
            return saveformat$levelsave.getSummary() != null;
        } catch (IOException ioexception) {
            SystemToast.onWorldAccessFailure(this.minecraft, "Demo_World");
            field_238656_b_.warn("Failed to read demo world data", (Throwable)ioexception);
            return false;
        }
    }

    private void switchToRealms() {
        RealmsBridgeScreen realmsbridgescreen = new RealmsBridgeScreen();
        realmsbridgescreen.switchToRealms(this);
    }

    public void render(MatrixStack matrixStack, int mouseX, int mouseY, float partialTicks) {
        if (this.firstRenderTime == 0L && this.showFadeInAnimation) {
            this.firstRenderTime = Util.getMillis();
        }

        float f = this.showFadeInAnimation ? (float)(Util.getMillis() - this.firstRenderTime) / 1000.0F : 1.0F;
        fill(matrixStack, 0, 0, this.width, this.height, -1);
        this.panorama.render(partialTicks, MathHelper.clamp(f, 0.0F, 1.0F));
        int i = 274;
        int j = this.width / 2 - 137;
        int k = 30;
        this.minecraft.getTextureManager().bind(PANORAMA_OVERLAY_TEXTURES);
        RenderSystem.enableBlend();
        RenderSystem.blendFunc(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA);
        RenderSystem.color4f(1.0F, 1.0F, 1.0F, this.showFadeInAnimation ? (float)MathHelper.ceil(MathHelper.clamp(f, 0.0F, 1.0F)) : 1.0F);
        blit(matrixStack, 0, 0, this.width, this.height, 0.0F, 0.0F, 16, 128, 16, 128);
        float f1 = this.showFadeInAnimation ? MathHelper.clamp(f - 1.0F, 0.0F, 1.0F) : 1.0F;
        int l = MathHelper.ceil(f1 * 255.0F) << 24;
        if ((l & -67108864) != 0) {
            this.minecraft.getTextureManager().bind(MINECRAFT_TITLE_TEXTURES);
            RenderSystem.color4f(1.0F, 1.0F, 1.0F, f1);
            if (this.showTitleWronglySpelled) {
                this.blitOutlineBlack(j, 30, (p_238660_2_, p_238660_3_) -> {
                    this.blit(matrixStack, p_238660_2_ + 0, p_238660_3_, 0, 0, 99, 44);
                    this.blit(matrixStack, p_238660_2_ + 99, p_238660_3_, 129, 0, 27, 44);
                    this.blit(matrixStack, p_238660_2_ + 99 + 26, p_238660_3_, 126, 0, 3, 44);
                    this.blit(matrixStack, p_238660_2_ + 99 + 26 + 3, p_238660_3_, 99, 0, 26, 44);
                    this.blit(matrixStack, p_238660_2_ + 155, p_238660_3_, 0, 45, 155, 44);
                });
            } else {
                this.blitOutlineBlack(j, 30, (p_238657_2_, p_238657_3_) -> {
                    this.blit(matrixStack, p_238657_2_ + 0, p_238657_3_, 0, 0, 155, 44);
                    this.blit(matrixStack, p_238657_2_ + 155, p_238657_3_, 0, 45, 155, 44);
                });
            }

            this.minecraft.getTextureManager().bind(MINECRAFT_TITLE_EDITION);
            blit(matrixStack, j + 88, 67, 0.0F, 0.0F, 98, 14, 128, 16);
       //     net.minecraftforge.client.ForgeHooksClient.renderMainMenu((MainMenuScreen) this, matrixStack, this.font, this.width, this.height, l);
            if (this.splashText != null) {
                RenderSystem.pushMatrix();
                RenderSystem.translatef((float)(this.width / 2 + 90), 70.0F, 0.0F);
                RenderSystem.rotatef(-20.0F, 0.0F, 0.0F, 1.0F);
                float f2 = 1.8F - MathHelper.abs(MathHelper.sin((float)(Util.getMillis() % 1000L) / 1000.0F * ((float)Math.PI * 2F)) * 0.1F);
                f2 = f2 * 100.0F / (float)(this.font.width(this.splashText) + 32);
                RenderSystem.scalef(f2, f2, f2);
                drawCenteredString(matrixStack, this.font, this.splashText, 0, -8, 16776960 | l);
                RenderSystem.popMatrix();
            }

            String s = "Minecraft " + SharedConstants.getCurrentVersion().getName();
            if (this.minecraft.isDemo()) {
                s = s + " Demo";
            } else {
                s = s + ("release".equalsIgnoreCase(this.minecraft.getVersionType()) ? "" : "/" + this.minecraft.getVersionType());
            }

            if (this.minecraft.isProbablyModded()) {
                s = s + I18n.get("menu.modded");
            }

            net.minecraftforge.fml.BrandingControl.forEachLine(true, true, (brdline, brd) ->
                    drawString(matrixStack, this.font, brd, 2, this.height - ( 10 + brdline * (this.font.lineHeight + 1)), 16777215 | l)
            );

            net.minecraftforge.fml.BrandingControl.forEachAboveCopyrightLine((brdline, brd) ->
                    drawString(matrixStack, this.font, brd, this.width - font.width(brd), this.height - (10 + (brdline + 1) * ( this.font.lineHeight + 1)), 16777215 | l)
            );

            drawString(matrixStack, this.font, "Copyright Mojang AB. Do not distribute!", this.widthCopyrightRest, this.height - 10, 16777215 | l);
            drawString(matrixStack, this.font, "Bienvenue sur cybercraft.", this.widthCopyrightRest + 60, this.height - 20, 16777215 | l);

            if (mouseX > this.widthCopyrightRest && mouseX < this.widthCopyrightRest + this.widthCopyright && mouseY > this.height - 10 && mouseY < this.height) {
                fill(matrixStack, this.widthCopyrightRest, this.height - 1, this.widthCopyrightRest + this.widthCopyright, this.height, 16777215 | l);
            }

            for(Widget widget : this.buttons) {
                widget.setAlpha(f1);
            }

            super.render(matrixStack, mouseX, mouseY, partialTicks);
            if (this.areRealmsNotificationsEnabled() && f1 >= 1.0F) {
                this.realmsNotification.render(matrixStack, mouseX, mouseY, partialTicks);
            }
         //   modUpdateNotification.render(matrixStack, mouseX, mouseY, partialTicks);

        }
    }

    public boolean mouseClicked(double mouseX, double mouseY, int button) {
        if (super.mouseClicked(mouseX, mouseY, button)) {
            return true;
        } else if (this.areRealmsNotificationsEnabled() && this.realmsNotification.mouseClicked(mouseX, mouseY, button)) {
            return true;
        } else {
            if (mouseX > (double)this.widthCopyrightRest && mouseX < (double)(this.widthCopyrightRest + this.widthCopyright) && mouseY > (double)(this.height - 10) && mouseY < (double)this.height) {
                this.minecraft.setScreen(new WinGameScreen(false, Runnables.doNothing()));
            }

            return false;
        }
    }

    public void onClose() {
        if (this.realmsNotification != null) {
            this.realmsNotification.onClose();
        }

    }

    private void deleteDemoWorld(boolean p_213087_1_) {
        if (p_213087_1_) {
            try (SaveFormat.LevelSave saveformat$levelsave = this.minecraft.getLevelSource().createAccess("Demo_World")) {
                saveformat$levelsave.deleteLevel();
            } catch (IOException ioexception) {
                SystemToast.onWorldDeleteFailure(this.minecraft, "Demo_World");
                field_238656_b_.warn("Failed to delete demo world", (Throwable)ioexception);
            }
        }

        this.minecraft.setScreen(this);
    }
}
